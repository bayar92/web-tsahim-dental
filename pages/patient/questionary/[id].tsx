import { useState, useRef, useEffect } from 'react';
import SignatureCanvas from 'react-signature-canvas';
import {
  Box, Checkbox, Heading, Button, Stack, Text, Textarea, Input,
  Radio, RadioGroup, useToast, CheckboxGroup, SimpleGrid
} from '@chakra-ui/react';
import axios from 'axios';
import { useRouter } from 'next/router';


const diseasesList = [
  '–®–∞—Ä–ª–∞–ª—Ç', '–í –≤–∏—Ä—É—Å', '–° –≤–∏—Ä—É—Å', '”®–Ω–¥”©—Ä –¥–∞—Ä–∞–ª—Ç', '“Æ–µ –º”©—á–Ω–∏–π ”©–≤—á–∏–Ω',
  '–¶—É—Å –≥–∞—Ä–¥–∞–≥—Ç–∞–π', '–°“Ø—Ä—å–µ—ç', '–¶—É—Å –±–∞–≥–∞–¥–∞–ª—Ç', '–¢–∞—Ç–∞–ª—Ç', '–•–æ—Ä—Ç —Ö–∞–≤–¥–∞—Ä',
  '–•–æ–¥–æ–æ–¥–Ω—ã —ç–º–≥—ç–≥', '–ë–∞—Ç–≥—Ä–∞—à', '–ó“Ø—Ä—Ö–Ω–∏–π ”©–≤—á–∏–Ω', '–ë”©”©—Ä–Ω–∏–π ”©–≤—á–∏–Ω',
  '–≠—Ä—Ö–∏–π–Ω –≥–∞–∂–∏–≥', '–®–∏–≥–¥—ç—Å', '–¶—É—Å–Ω—ã ”©–≤—á–∏–Ω', '–ß–∏—Ö—Ä–∏–π–Ω —à–∏–∂–∏–Ω',
  '–ê–º—å—Å–≥–∞–ª—ã–Ω –≥–∞–∂–∏–≥', '–ì–∞–π–º–æ—Ä–∏—Ç', '–ù“Ø–¥–Ω–∏–π –¥–∞—Ä–∞–ª—Ç', '–ê–ª—å –Ω—å —á –±–∞–π—Ö–≥“Ø–π'
];

export default function QuestionaryPage() {
  const router = useRouter();
  const [tenantId, setTenantId] = useState('');
  const [personId, setPersonId] = useState('');

  useEffect(() => {
    if (router.asPath.includes('=')) {
      const [tenant, person] = router.asPath.split('/').pop()?.split('=') || [];
      setTenantId(tenant);
      setPersonId(person);
    }
  }, [router.asPath]);

  const sigCanvasRef = useRef<SignatureCanvas>(null);

  const [reason, setReason] = useState('');
  const [allergyName, setAllergyName] = useState('');
  const [medicationDesc, setMedicationDesc] = useState('');
  const [pregnantMonth, setPregnantMonth] = useState('');
  const [breastfeedMonth, setBreastfeedMonth] = useState('');
  const [childMonth, setChildMonth] = useState('');
  const [surgeryDesc, setSurgeryDesc] = useState('');
  const [anesthesiaDesc, setAnesthesiaDesc] = useState('');
  const [generalDesc, setGeneralDesc] = useState('');
  const [emotionalOther, setEmotionalOther] = useState('');

  const [hasAllergy, setHasAllergy] = useState('');
  const [hasMedication, setHasMedication] = useState('');
  const [hasPregnant, setHasPregnant] = useState('');
  const [hasbreastfeeding, setHasbreastfeeding] = useState('');
  const [haschild, setHaschild] = useState('');
  const [hassurgery, setHassurgery] = useState('');
  const [hasanesthesia, setHasanesthesia] = useState('');
  const [hasgeneral, setHasgeneral] = useState('');
  const [hasSmoke, setHasSmoke] = useState('');
  const [hasBlackSmoke, setHasBlackSmoke] = useState('');
  const [emotionalReaction, setEmotionalReaction] = useState('');
  const [selectedDiseases, setSelectedDiseases] = useState<string[]>([]);
  const [otherDisease, setOtherDisease] = useState('');

  const toast = useToast();

  const handleYesNoChange = (field: string, value: string) => {
    switch (field) {
      case 'hasAllergy': setHasAllergy(value); if (value === '“Æ–≥“Ø–π') setAllergyName(''); break;
      case 'hasMedication': setHasMedication(value); break;
      case 'hasPregnant': setHasPregnant(value); break;
      case 'hasbreastfeeding': setHasbreastfeeding(value); break;
      case 'haschild': setHaschild(value); break;
      case 'hassurgery': setHassurgery(value); break;
      case 'hasanesthesia': setHasanesthesia(value); break;
      case 'hasgeneral': setHasgeneral(value); break;
      case 'hasSmoke': setHasSmoke(value); break;
      case 'hasBlackSmoke': setHasBlackSmoke(value); break;
      case 'emotionalReaction': setEmotionalReaction(value); break;
      default: break;
    }
  };

  const handleSubmit = async () => {
    if (!sigCanvasRef.current || sigCanvasRef.current.isEmpty()) {
      toast({
        title: '–ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞',
        description: '–ì–∞—Ä—ã–Ω “Ø—Å–≥—ç—ç –∑—É—Ä–Ω–∞ —É—É.',
        status: 'warning',
        duration: 3000
      });
      return;
    }
  const fullDataUrl = sigCanvasRef.current.toDataURL();
  const base64Data = fullDataUrl.replace(/^data:image\/png;base64,/, ''); // <-- –∑”©–≤—Ö”©–Ω base64

    const finalData = {
      tenantId,
      personId: parseInt(personId),
      questionnairePK: 1,
      SignatureData: base64Data,
      Reason: reason,
      bodisHarshil: hasAllergy === '–¢–∏–π–º',
      bodisHarshilDesc: allergyName,
      emTaria: hasMedication === '–¢–∏–π–º',
      emTariaDesc: medicationDesc,
      Pregnant: hasPregnant === '–¢–∏–π–º',
      PregnantDesc: pregnantMonth,
      Surgery: hassurgery === '–¢–∏–π–º',
      SurgeryDesc: surgeryDesc,
      Difficulty: hasgeneral === '–¢–∏–π–º',
      DifficultyDesc: generalDesc,
      Uvchin: otherDisease,
      breast: hasbreastfeeding === '–¢–∏–π–º',
      breastDesc: breastfeedMonth,
      children: childMonth,
      psychology: ['–°–∞–π–Ω “Ø–∑“Ø“Ø–ª–¥—ç–≥', '“Æ–∑“Ø“Ø–ª—ç—Ö –¥—É—Ä–≥“Ø–π', '–£–π–ª–¥–∞–≥', '–ë—É—Å–∞–¥'].includes(emotionalReaction),
      psychologyDesc: emotionalReaction === '–ë—É—Å–∞–¥' ? emotionalOther : emotionalReaction,
      sideEffects: hasanesthesia === '–¢–∏–π–º',
      sideEffectsDesc: anesthesiaDesc,

      Harshil_Tiim1: hasAllergy === '–¢–∏–π–º',
      Harshil_Ugui1: hasAllergy === '“Æ–≥“Ø–π',
      EmTaria_Tiim2: hasMedication === '–¢–∏–π–º',
      EmTaria_Ugui2: hasMedication === '“Æ–≥“Ø–π',
      Jiremsen_Tiim3: hasPregnant === '–¢–∏–π–º',
      Jiremsen_Ugui3: hasPregnant === '“Æ–≥“Ø–π',
      Huhuul_Huuhedtei_Tiim4: hasbreastfeeding === '–¢–∏–π–º',
      Huhuul_Huuhedtei_Ugui4: hasbreastfeeding === '“Æ–≥“Ø–π',
      Hagalgaand_Orj_Baisan_Tiim5: hassurgery === '–¢–∏–π–º',
      Hagalgaand_Orj_Baisan_Ugui5: hassurgery === '“Æ–≥“Ø–π',
      Gaj_Nuluu_Ilerch_Baisan_Tiim6: hasanesthesia === '–¢–∏–π–º',
      Gaj_Nuluu_Ilerch_Baisan_Ugui6: hasanesthesia === '“Æ–≥“Ø–π',
      Biyiin_Hundreltei_Uchirch_Baisan_Tiim7: hasgeneral === '–¢–∏–π–º',
      Biyiin_Hundreltei_Uchirch_Baisan_Ugui7: hasgeneral === '“Æ–≥“Ø–π',
      Tamhi_Tatdag_Tiim8: hasSmoke === '–¢–∏–π–º',
      Tamhi_Tatdag_Ugui8: hasSmoke === '“Æ–≥“Ø–π',
      Har_Tamhi_Hereglej_Baisan_Tiim9: hasBlackSmoke === '–¢–∏–π–º',
      Har_Tamhi_Hereglej_Baisan_Ugui9: hasBlackSmoke === '“Æ–≥“Ø–π',

      Sain_Uzuuldeg: emotionalReaction === '–°–∞–π–Ω “Ø–∑“Ø“Ø–ª–¥—ç–≥',
      Uzuuleh_Durgui: emotionalReaction === '“Æ–∑“Ø“Ø–ª—ç—Ö –¥—É—Ä–≥“Ø–π',
      Uildag: emotionalReaction === '–£–π–ª–¥–∞–≥',
      Busad: emotionalReaction === '–ë—É—Å–∞–¥',

      Shartalt: selectedDiseases.includes('–®–∞—Ä–ª–∞–ª—Ç'),
      B_Virus: selectedDiseases.includes('–í –≤–∏—Ä—É—Å'),
      C_Virus: selectedDiseases.includes('–° –≤–∏—Ä—É—Å'),
      Undur_Daralt: selectedDiseases.includes('”®–Ω–¥”©—Ä –¥–∞—Ä–∞–ª—Ç'),
      Uy_Much: selectedDiseases.includes('“Æ–µ –º”©—á–Ω–∏–π ”©–≤—á–∏–Ω'),
      Tsus: selectedDiseases.includes('–¶—É—Å –≥–∞—Ä–¥–∞–≥—Ç–∞–π'),
      Suriye: selectedDiseases.includes('–°“Ø—Ä—å–µ—ç'),
      Tsus_Bagadalt: selectedDiseases.includes('–¶—É—Å –±–∞–≥–∞–¥–∞–ª—Ç'),
      Tatalt: selectedDiseases.includes('–¢–∞—Ç–∞–ª—Ç'),
      Havdar: selectedDiseases.includes('–•–æ—Ä—Ç —Ö–∞–≤–¥–∞—Ä'),
      Hodood: selectedDiseases.includes('–•–æ–¥–æ–æ–¥–Ω—ã —ç–º–≥—ç–≥'),
      Bagtraa: selectedDiseases.includes('–ë–∞—Ç–≥—Ä–∞—à'),
      Zurhnii_Uvchin: selectedDiseases.includes('–ó“Ø—Ä—Ö–Ω–∏–π ”©–≤—á–∏–Ω'),
      Buurnii_Uvchin: selectedDiseases.includes('–ë”©”©—Ä–Ω–∏–π ”©–≤—á–∏–Ω'),
      ZurhniiGajig: selectedDiseases.includes('–≠—Ä—Ö–∏–π–Ω –≥–∞–∂–∏–≥'),
      Shigdees: selectedDiseases.includes('–®–∏–≥–¥—ç—Å'),
      Tsusnii_Uvchin: selectedDiseases.includes('–¶—É—Å–Ω—ã ”©–≤—á–∏–Ω'),
      Chihriin_Shinjin: selectedDiseases.includes('–ß–∏—Ö—Ä–∏–π–Ω —à–∏–∂–∏–Ω'),
      AmisgaliinGajig: selectedDiseases.includes('–ê–º—å—Å–≥–∞–ª—ã–Ω –≥–∞–∂–∏–≥'),
      Gaimorit: selectedDiseases.includes('–ì–∞–π–º–æ—Ä–∏—Ç'),
      Nudnii_Daralt: selectedDiseases.includes('–ù“Ø–¥–Ω–∏–π –¥–∞—Ä–∞–ª—Ç'),
      Baihgui: selectedDiseases.includes('–ê–ª—å –Ω—å —á –±–∞–π—Ö–≥“Ø–π')
    };

    console.log('üìù Final JSON:', finalData);

    try {
      await axios.post('/api/questionary/submit', finalData);
      toast({
        title: '–ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞',
        status: 'success',
        duration: 3000
      });
    } catch (error) {
      console.error('‚ùå –ò–ª–≥—ç—ç—Ö –∞–ª–¥–∞–∞:', error);
      toast({
        title: '–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞',
        description: '–ú—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞',
        status: 'error',
        duration: 3000
      });
    }
  };

return (
  <Box maxW="800px" mx="auto" mt={6} mb={6} border="1px solid #ccc" borderRadius="md" justifyContent="center" alignItems="center">
    {/* –®–∞–ª—Ç–≥–∞–∞–Ω */}
    <Box p={2}>
        <Text mb={2}>–ú–∞–Ω–∞–π —ç–º–Ω—ç–ª—ç–≥—Ç –∏—Ä—Å—ç–Ω —à–∞–ª—Ç–≥–∞–∞–Ω —é—É –≤—ç?</Text>
        <Textarea
        value={reason}
        onChange={(e) => setReason(e.target.value)}
        placeholder="–≠–Ω–¥ –±–∏—á–Ω—ç “Ø“Ø"
        />
    </Box>
    {/* –≠–º–∏–π–Ω —Ö–∞—Ä—à–∏–ª */}
    <Box p={2}>
      <Text mb={2}>–¢–∞ —è–º–∞—Ä –Ω—ç–≥—ç–Ω —ç–º–∏–π–Ω –±–æ–¥–∏—Å—Ç —Ö–∞—Ä—à–∏–ª—Ç–∞–π —é—É?</Text>
      <RadioGroup value={hasAllergy} onChange={(val) => handleYesNoChange('hasAllergy',val)} colorScheme="blue">
          <Stack direction="row" spacing={6}>
              <Radio value="–¢–∏–π–º">–¢–∏–π–º</Radio>
              <Radio value="“Æ–≥“Ø–π">“Æ–≥“Ø–π</Radio>
          </Stack>
      </RadioGroup>
      {hasAllergy === '–¢–∏–π–º' && (
      <Box mt={3}>
          <Text>–¢–∏–π–º –±–æ–ª —è–º–∞—Ä –±–æ–¥–∏—Å–æ–Ω–¥ —Ö–∞—Ä—à–∏–ª—Ç–∞–π –≤—ç?</Text>
          <Input mt={3} value={allergyName} onChange={(e) => setAllergyName(e.target.value)} placeholder="–ñ–∏—à—ç—ç: –ü–µ–Ω–∏—Ü–∏–ª–ª–∏–Ω"/>
      </Box>
      )}
    </Box>
    {/* –¢–∞–Ω–¥ –±–∞–π–Ω–≥–∞ —Ö—ç—Ä—ç–≥–ª—ç–¥—ç–≥ —ç–º —Ç–∞—Ä–∏–∞ –±–∏–π —é—É? */}
    <Box p={2}>
      <Text mb={2}>–¢–∞–Ω–¥ –±–∞–π–Ω–≥–∞ —Ö—ç—Ä—ç–≥–ª—ç–¥—ç–≥ —ç–º —Ç–∞—Ä–∏–∞ –±–∏–π —é—É?</Text>
      <RadioGroup value={hasMedication} onChange={(val) => handleYesNoChange('hasMedication',val)} colorScheme="blue">
          <Stack direction="row" spacing={6}>
              <Radio value="–¢–∏–π–º">–¢–∏–π–º</Radio>
              <Radio value="“Æ–≥“Ø–π">“Æ–≥“Ø–π</Radio>
          </Stack>
      </RadioGroup>

      {hasMedication === '–¢–∏–π–º' && (
      <Box mt={3}>
          <Text>–¢–∏–π–º –±–æ–ª —è–º–∞—Ä ?</Text>
          <Input mt={3}/>
      </Box>
    )}
    </Box>
    {/* –¢–∞ –∂–∏—Ä—ç–º—Å–Ω—ç “Ø“Ø? (–≠–º—ç–≥—Ç—ç–π—á“Ø“Ø–¥—ç–¥ —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π) */}
    <Box p={2}>
      <Text mb={2}>–¢–∞ –∂–∏—Ä—ç–º—Å–Ω—ç “Ø“Ø? (–≠–º—ç–≥—Ç—ç–π—á“Ø“Ø–¥—ç–¥ —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π) </Text>
      <RadioGroup value={hasPregnant} onChange={(val) => handleYesNoChange('hasPregnant',val)} colorScheme="blue">
          <Stack direction="row" spacing={6}>
              <Radio value="–¢–∏–π–º">–¢–∏–π–º</Radio>
              <Radio value="“Æ–≥“Ø–π">“Æ–≥“Ø–π</Radio>
          </Stack>
      </RadioGroup>

      {hasPregnant === '–¢–∏–π–º' && (
      <Box mt={3}>
          <Text>–¢–∏–π–º –±–æ–ª —Ö—ç–¥—ç–Ω —Å–∞—Ä—Ç–∞–π –≤—ç?</Text>
          <Input mt={3}/>
      </Box>
      )}
    </Box>
    { /*–¢–∞ —Ö”©—Ö“Ø“Ø–ª —Ö“Ø“Ø—Ö—ç–¥—Ç—ç–π —é—É? (–≠–º—ç–≥—Ç—ç–π—á“Ø“Ø–¥—ç–¥ —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π) */}
    <Box p={2}>
      <Text mb={2}>–¢–∞ —Ö”©—Ö“Ø“Ø–ª —Ö“Ø“Ø—Ö—ç–¥—Ç—ç–π —é—É? (–≠–º—ç–≥—Ç—ç–π—á“Ø“Ø–¥—ç–¥ —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π)  </Text>
      <RadioGroup value={hasbreastfeeding} onChange={(val) => handleYesNoChange('hasbreastfeeding',val)} colorScheme="blue">
          <Stack direction="row" spacing={6}>
              <Radio value="–¢–∏–π–º">–¢–∏–π–º</Radio>
              <Radio value="“Æ–≥“Ø–π">“Æ–≥“Ø–π</Radio>
          </Stack>
      </RadioGroup>

      {hasbreastfeeding === '–¢–∏–π–º' && (
      <Box mt={3}>
          <Text>–¢–∏–π–º –±–æ–ª —Ö—ç–¥—ç–Ω —Å–∞—Ä—Ç–∞–π –≤—ç?</Text>
          <Input mt={3}/>
      </Box>
      )}
    </Box>
    {/*–¢–∞–Ω—ã —Ö“Ø“Ø—Ö—ç–¥ —Ö–∞–º–≥–∏–π–Ω —Å“Ø“Ø–ª–¥ —Ö—ç–∑—ç—ç —à“Ø–¥–Ω–∏–π —ç–º–Ω—ç–ª—ç–≥—Ç “Ø–∑“Ø“Ø–ª—Å—ç–Ω –±—ç? (–•“Ø“Ø—Ö–¥—ç–¥ —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π) */}
    <Box p={2}>
      <Text mb={2}>–¢–∞ —Ö”©—Ö“Ø“Ø–ª —Ö“Ø“Ø—Ö—ç–¥—Ç—ç–π —é—É? (–≠–º—ç–≥—Ç—ç–π—á“Ø“Ø–¥—ç–¥ —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π)  </Text>
      <RadioGroup value={haschild} onChange={(val) => handleYesNoChange('haschild',val)} colorScheme="blue">
        <Stack direction="row" spacing={6}>
            <Radio value="–¢–∏–π–º">–¢–∏–π–º</Radio>
            <Radio value="“Æ–≥“Ø–π">“Æ–≥“Ø–π</Radio>
        </Stack>
      </RadioGroup>

      {haschild  === '–¢–∏–π–º' && (
      <Box mt={3}>
          <Text>–¢–∏–π–º –±–æ–ª —Ö—ç–¥—ç–Ω —Å–∞—Ä—Ç–∞–π –≤—ç?</Text>
          <Input mt={3}/>
      </Box>
      )}
    </Box>
    {/* –¢–∞–Ω—ã —Ö“Ø“Ø—Ö—ç–¥ —à“Ø–¥–Ω–∏–π —ç–º—á–∏–¥ “Ø–∑“Ø“Ø–ª—ç—Ö–¥—ç—ç —Å—ç—Ç–≥—ç–ª–∑“Ø–π —è–º–∞—Ä –±–∞–π—Å–∞–Ω –±—ç? (–•“Ø“Ø—Ö–¥—ç–¥ —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π) */}
    <Box p={2}>
      <Text mb={2}>
        –¢–∞–Ω—ã —Ö“Ø“Ø—Ö—ç–¥ —à“Ø–¥–Ω–∏–π —ç–º—á–∏–¥ “Ø–∑“Ø“Ø–ª—ç—Ö–¥—ç—ç —Å—ç—Ç–≥—ç–ª–∑“Ø–π —è–º–∞—Ä –±–∞–π—Å–∞–Ω –±—ç? (–•“Ø“Ø—Ö–¥—ç–¥ —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π)
      </Text>
      <RadioGroup value={emotionalReaction} onChange={(val) => handleYesNoChange('emotionalReaction', val)} colorScheme="blue">
        <SimpleGrid columns={[1, 2, 3, 4]} spacing={2}>
        
          <Radio value="–°–∞–π–Ω “Ø–∑“Ø“Ø–ª–¥—ç–≥">–°–∞–π–Ω “Ø–∑“Ø“Ø–ª–¥—ç–≥</Radio>
          <Radio value="“Æ–∑“Ø“Ø–ª—ç—Ö –¥—É—Ä–≥“Ø–π">“Æ–∑“Ø“Ø–ª—ç—Ö –¥—É—Ä–≥“Ø–π</Radio>
          <Radio value="–£–π–ª–¥–∞–≥">–£–π–ª–¥–∞–≥</Radio>
          <Radio value="–ë—É—Å–∞–¥">–ë—É—Å–∞–¥</Radio>
        </SimpleGrid>
      </RadioGroup>
      {emotionalReaction === '–ë—É—Å–∞–¥' && (
        <Box mt={3}>
          <Text>–®–∞–ª—Ç–≥–∞–∞–Ω –±–∏—á–Ω—ç “Ø“Ø</Text>
          <Input mt={3} />
        </Box>
      )}
    </Box>
    {/*–¢–∞ —Ö–∞–≥–∞–ª–≥–∞–∞–Ω–¥ –æ—Ä–∂ –±–∞–π—Å–∞–Ω —É—É? */}
    <Box p={2}>
      <Text mb={2}>–¢–∞ —Ö–∞–≥–∞–ª–≥–∞–∞–Ω–¥ –æ—Ä–∂ –±–∞–π—Å–∞–Ω —É—É?</Text>
       <RadioGroup value={hassurgery} onChange={(val) => handleYesNoChange('hassurgery', val)} colorScheme="blue">
          <Stack direction="row" spacing={6}>
              <Radio value="–¢–∏–π–º">–¢–∏–π–º</Radio>
              <Radio value="“Æ–≥“Ø–π">“Æ–≥“Ø–π</Radio>
          </Stack>
      </RadioGroup>

      {hassurgery  === '–¢–∏–π–º' && (
      <Box mt={3}>
          <Text>–¢–∏–π–º –±–æ–ª —Ö—ç–∑—ç—ç —è–º–∞—Ä —Ö–∞–≥–∞–ª–≥–∞–∞–Ω–¥ –æ—Ä—Å–æ–Ω –±—ç?</Text>
          <Input mt={3}/>
      </Box>
      )}
    </Box>
    {/*–¢–∞ —à“Ø–¥–Ω–∏–π —ç–º–Ω—ç–ª—ç–≥—Ç —ç–º—á–∏–ª–≥—ç—ç —Ö–∏–π–ª–≥—ç—Ö “Ø–µ–¥ —ç—Å–≤—ç–ª –º—ç–¥—ç—ç –∞–ª–¥—É—É–ª–∞—Ö —Ç–∞—Ä–∏–∞ —Ö–∏–π–ª–≥—ç—Ö “Ø–µ–¥ –≥–∞–∂ –Ω”©–ª”©”© –∏–ª—ç—Ä—á –±–∞–π—Å–∞–Ω —É—É?*/}
    <Box p={2}>
      <Text mb={2}>–¢–∞ —à“Ø–¥–Ω–∏–π —ç–º–Ω—ç–ª—ç–≥—Ç —ç–º—á–∏–ª–≥—ç—ç —Ö–∏–π–ª–≥—ç—Ö “Ø–µ–¥ —ç—Å–≤—ç–ª –º—ç–¥—ç—ç –∞–ª–¥—É—É–ª–∞—Ö —Ç–∞—Ä–∏–∞ —Ö–∏–π–ª–≥—ç—Ö “Ø–µ–¥ –≥–∞–∂ –Ω”©–ª”©”© –∏–ª—ç—Ä—á –±–∞–π—Å–∞–Ω —É—É?</Text>
      <RadioGroup value={hasanesthesia} onChange={(val) => handleYesNoChange('hasanesthesia', val)} colorScheme="blue">
          <Stack direction="row" spacing={6}>
              <Radio value="–¢–∏–π–º">–¢–∏–π–º</Radio>
              <Radio value="“Æ–≥“Ø–π">“Æ–≥“Ø–π</Radio>
          </Stack>
      </RadioGroup>

      {hasanesthesia  === '–¢–∏–π–º' && (
      <Box mt={3}>
          <Text>–¢–∏–π–º –±–æ–ª —è–º–∞—Ä –≥–∞–∂ –Ω”©–ª”©”© –∏–ª—ç—Ä—á –±–∞–π—Å–∞–Ω –±—ç?</Text>
          <Input mt={3}/>
      </Box>
      )}
    </Box>
    {/*–¢–∞ —É—Ä—å–¥ –Ω—å —à“Ø–¥–Ω–∏–π —ç–º–Ω—ç–ª—ç–≥—Ç “Ø–∑“Ø“Ø–ª–∂ –±–∞–π—Ö–¥–∞–∞ –µ—Ä”©–Ω—Ö–∏–π –±–∏–µ–∏–π–Ω —Ö“Ø–Ω–¥—Ä—ç–ª—Ç—ç–π —É—á–∏—Ä—á –±–∞–π—Å–∞–Ω —É—É?*/}
    <Box p={2}>
      <Text mb={2}>–¢–∞ —É—Ä—å–¥ –Ω—å —à“Ø–¥–Ω–∏–π —ç–º–Ω—ç–ª—ç–≥—Ç “Ø–∑“Ø“Ø–ª–∂ –±–∞–π—Ö–¥–∞–∞ –µ—Ä”©–Ω—Ö–∏–π –±–∏–µ–∏–π–Ω —Ö“Ø–Ω–¥—Ä—ç–ª—Ç—ç–π —É—á–∏—Ä—á –±–∞–π—Å–∞–Ω —É—É?</Text>
       <RadioGroup value={hasgeneral} onChange={(val) => handleYesNoChange('hasgeneral', val)} colorScheme="blue">
          <Stack direction="row" spacing={6}>
              <Radio value="–¢–∏–π–º">–¢–∏–π–º</Radio>
              <Radio value="“Æ–≥“Ø–π">“Æ–≥“Ø–π</Radio>
          </Stack>
      </RadioGroup>

      {hasgeneral  === '–¢–∏–π–º' && (
      <Box mt={3}>
          <Text>–¢–∏–π–º –±–æ–ª —è–º–∞—Ä —Ö“Ø–Ω–¥—Ä—ç–ª—Ç—ç–π —É—á–∏—Ä—á –±–∞–π—Å–∞–Ω –±—ç?</Text>
          <Input mt={3}/>
      </Box>
      )}
    </Box>
    {/*–¢–∞ —Ç–∞–º—Ö–∏ —Ç–∞—Ç–¥–∞–≥ —É—É?*/}
    <Box p={2}>
      <Text mb={2}>–¢–∞ —Ç–∞–º—Ö–∏ —Ç–∞—Ç–¥–∞–≥ —É—É?</Text>
      <RadioGroup value={hasSmoke} onChange={(val) => handleYesNoChange('hasSmoke', val)} colorScheme="blue">
          <Stack direction="row" spacing={6}>
              <Radio value="–¢–∏–π–º">–¢–∏–π–º</Radio>
              <Radio value="“Æ–≥“Ø–π">“Æ–≥“Ø–π</Radio>
          </Stack>
      </RadioGroup>
    </Box>
    {/*–¢–∞ —Ö–∞—Ä —Ç–∞–º—Ö–∏ —Ö—ç—Ä—ç–≥–ª—ç–∂ –±–∞–π—Å–∞–Ω —É—É?*/}
    <Box p={2}>
      <Text mb={2}>–¢–∞ —Ö–∞—Ä —Ç–∞–º—Ö–∏ —Ö—ç—Ä—ç–≥–ª—ç–∂ –±–∞–π—Å–∞–Ω —É—É?</Text>
      <RadioGroup value={hasBlackSmoke} onChange={(val) => handleYesNoChange('hasBlackSmoke', val)} colorScheme="blue">
          <Stack direction="row" spacing={6}>
              <Radio value="–¢–∏–π–º">–¢–∏–π–º</Radio>
              <Radio value="“Æ–≥“Ø–π">“Æ–≥“Ø–π</Radio>
          </Stack>
      </RadioGroup>
    </Box>
    {/*–î–∞—Ä–∞–∞—Ö ”©–≤—á–∏–Ω —ç–º–≥—ç–≥“Ø“Ø–¥ —Ç–∞–Ω–¥ –±–∏–π —é—É?*/}
    <Box p={2}>
      <Text mb={2}>–î–∞—Ä–∞–∞—Ö ”©–≤—á–∏–Ω —ç–º–≥—ç–≥“Ø“Ø–¥ —Ç–∞–Ω–¥ –±–∏–π —é—É?</Text>
      <CheckboxGroup
        value={selectedDiseases}
        onChange={(values) => setSelectedDiseases(values as string[])}
      >
        <SimpleGrid columns={[1, 2, 3, 4]} spacing={2}>
          {diseasesList.map((disease) => (
            <Checkbox key={disease} value={disease} colorScheme="blue">
              {disease}
            </Checkbox>
          ))}
        </SimpleGrid>
      </CheckboxGroup>
    </Box>
    {/*”®”©—Ä ”©–≤—á–∏–Ω –±–∞–π–≤–∞–ª —Ç–æ–¥—Ä—É—É–ª–∂ –±–∏—á–Ω—ç “Ø“Ø! */}
    <Box p={2}>
        <Text mb={2}>”®”©—Ä ”©–≤—á–∏–Ω –±–∞–π–≤–∞–ª —Ç–æ–¥—Ä—É—É–ª–∂ –±–∏—á–Ω—ç “Ø“Ø!</Text>
        <Textarea
        value={otherDisease}
        onChange={(e) => setOtherDisease(e.target.value)}
        placeholder="–≠–Ω–¥ –±–∏—á–Ω—ç “Ø“Ø"
        />
    </Box>
    <Box p={2}>
      <Text mb={2}>–ì–∞—Ä—ã–Ω “Ø—Å–≥—ç—ç –∑—É—Ä–Ω–∞ —É—É</Text>
      <Box border="1px solid #ccc" borderRadius="md" overflow="hidden" mb={2}>
        <SignatureCanvas
          penColor="black"
          canvasProps={{ width: 500, height: 200, className: 'sigCanvas' }}
          ref={sigCanvasRef}
        />
      </Box>
      <Stack direction="row" spacing={4}>
        <Button onClick={() => sigCanvasRef.current?.clear()} colorScheme="gray">
          –ê—Ä–∏–ª–≥–∞—Ö
        </Button>
        <Button onClick={handleSubmit} colorScheme="teal">
          –ó—É—Ä–∞–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö
        </Button>
      </Stack>
    </Box>
  </Box>  
  );
}
